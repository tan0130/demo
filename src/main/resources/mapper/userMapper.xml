<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper通过命名空间的名称来搜索userMapeper接口,接口的方法名和id名称一致，然后执行相应的sql语句进行相应的操作 -->
<mapper namespace = "ssm.dao.UserDAO">
    <!-- 获取所有用户信息 -->
    <select id = "getAllUser" resultType="java.util.Map">
        select * from user;
    </select>

    <!-- 根据id查询用户信息 -->
    <select id = "getUserById" parameterType = "int" resultType = "ssm.entity.User">
        select * from user where userid = #{userId};
    </select>

    <!-- 根据ID和密码查询用户信息 在MyBatis3.4.4版不能直接使用#{0}要使用 #{arg0}-->
    <select id="getUserByIdAndPwd" resultType="ssm.entity.User">
        select * from user where userid = #{arg0} and password = #{arg1};
    </select>


    <!--&lt;!&ndash; 更具ID查询用户信息 &ndash;&gt;
    <select id = "getUserById" parameterType = "int" resultType = "entity.User">
        select * from user where userid = #{userId};
    </select>

    &lt;!&ndash; 根据ID和password来查询用户信息 &ndash;&gt;
    <select id="getUserByIdAndPwd" resultType="entity.User">
        select * from user where userid = #{0} and password = #{1};
    </select>

    &lt;!&ndash; 添加用户信息 &ndash;&gt;
    <insert id = "addUser" parameterType = "entity.User">
        insert into user(nickname,password,username,sex,tel,email,mark) values(#{nickName},#{userPwd},#{userName},#{sex},#{tel},#{email},#{mark});
    </insert>

    &lt;!&ndash; 删除用户信息 &ndash;&gt;
    <delete id = "deleteUser" parameterType = "int">
        delete from user where userid = #{userId};
    </delete>

    &lt;!&ndash; 编辑用户信息 &ndash;&gt;
    <update id = "editUser" parameterType = "entity.User">
        update user set nickname=#{nickName},username=#{userName},sex=#{sex},tel=#{tel},email=#{email},mark=#{mark} where userid = #{userId};
    </update>

    &lt;!&ndash; 修改用户密码 &ndash;&gt;
    <update id="editPassword">
        update user set password=#{userPwd} where userid=#{userId};
    </update>-->
</mapper>