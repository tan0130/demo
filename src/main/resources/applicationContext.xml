<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!--加入 application.properties 配置文件-->
    <context:property-placeholder location="classpath:application.properties"/>

    <!-- 邮件发送 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${qq.mail.host}"/>
        <property name="port" value="${qq.mail.port}"/>
        <property name="username" value="${qq.mail.username}"/>
        <property name="password" value="${qq.mail.password}"/>
        <property name="defaultEncoding" value="${qq.mail.default-encoding}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
                <!--<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>-->
                <!-- 如果是网易邮箱， mail.smtp.starttls.enable 设置为 false-->
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>
    </bean>

    <!-- Shiro 配置 -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
        <!--<property name="securityManager" ref="securityManager"/>-->

        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--# some example chain definitions:-->
                <!--/admin/** = authc, roles[admin]-->
                <!--/docs/** = authc, perms[document:read]-->
                <!--/** = authc-->
                <!--# more URL-to-FilterChain definitions here-->
            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<bean id="someFilter" class=""/>-->
    <!--<bean id="anotherFilter" class=""> ... </bean>-->

    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
        <!--&lt;!&ndash; Single realm app.  If you have multiple realms, use the 'realms' property instead. &ndash;&gt;-->
        <!--<property name="realm" ref="myRealm"/>-->
        <!--&lt;!&ndash; By default the servlet container sessions will be used.  Uncomment this line-->
             <!--to use shiro's native sessions (see the JavaDoc for more): &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="sessionMode" value="native"/> &ndash;&gt;-->
    <!--</bean>-->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

    <!--&lt;!&ndash; Define the Shiro Realm implementation you want to use to connect to your back-end &ndash;&gt;-->
    <!--&lt;!&ndash; security datasource: &ndash;&gt;-->
    <!--<bean id="myRealm" class="ssm.realm.MyRealm"/>-->

    <!-- 只解析除controller之外的注解(即解析service、dao), 避免重复加载导致事务失效  -->
    <context:component-scan base-package="ssm.entity, ssm.service, ssm.test, ssm.dao, ssm.aop">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver_class_name}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user_name}" />
        <property name="password" value="${jdbc.user_password}" />

        <!-- 配置连接池的初始值 -->
        <property name="initialSize" value="${dbcp.initial_size}" />
        <!-- 连接池的最大值 -->
        <!-- <property name="maxActive" value="500"/> -->
        <!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
        <!-- <property name="maxIdle" value="2"/> -->
        <!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
        <property name="minIdle" value="${dbcp.maxIdle}" />
        <property name="maxActive" value="${dbcp.maxActive}" />
        <property name="maxIdle" value="${dbcp.minIdle}" />
        <property name="maxWait" value="${dbcp.maxWait}" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类并注入到Spring的容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="ssm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 加载 mybatis 配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="ssm.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用注解事务，需要添加Transactional注解属性 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
</beans>